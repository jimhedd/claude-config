{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/Users/jim.he/Projects/asgard","sessionId":"d16e2963-d9c9-45d8-a8f2-84024947adad","version":"1.0.69","gitBranch":"vlathgupta/shadow/cadence-skeleton","type":"user","message":{"role":"user","content":"Code review 2b7d4040dcc270cb678bd63745d7171cffced614"},"uuid":"59941088-99f1-470e-baf0-572507fa4187","timestamp":"2025-08-08T22:13:21.282Z"}
{"parentUuid":"59941088-99f1-470e-baf0-572507fa4187","isSidechain":false,"userType":"external","cwd":"/Users/jim.he/Projects/asgard","sessionId":"d16e2963-d9c9-45d8-a8f2-84024947adad","version":"1.0.69","gitBranch":"vlathgupta/shadow/cadence-skeleton","message":{"id":"msg_0189yGxMsYAcjwMgwuUyMTTy","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"I'll review the commit for you. Let me start by examining the commit details."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":926,"cache_read_input_tokens":16039,"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CRw1djMgr48YVkTQ9myN3","type":"assistant","uuid":"4ac9c0b8-dafa-422a-b3a5-5a622c9848ff","timestamp":"2025-08-08T22:13:24.128Z"}
{"parentUuid":"4ac9c0b8-dafa-422a-b3a5-5a622c9848ff","isSidechain":false,"userType":"external","cwd":"/Users/jim.he/Projects/asgard","sessionId":"d16e2963-d9c9-45d8-a8f2-84024947adad","version":"1.0.69","gitBranch":"vlathgupta/shadow/cadence-skeleton","message":{"id":"msg_0189yGxMsYAcjwMgwuUyMTTy","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_013DhiMvDeRrpP6ooFQp9Vt3","name":"Bash","input":{"command":"git show 2b7d4040dcc270cb678bd63745d7171cffced614","description":"Show commit details and changes"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":926,"cache_read_input_tokens":16039,"output_tokens":114,"service_tier":"standard"}},"requestId":"req_011CRw1djMgr48YVkTQ9myN3","type":"assistant","uuid":"b118d983-3b8e-4d5c-aa3c-798d74432f8d","timestamp":"2025-08-08T22:13:25.054Z"}
{"parentUuid":"b118d983-3b8e-4d5c-aa3c-798d74432f8d","isSidechain":false,"userType":"external","cwd":"/Users/jim.he/Projects/asgard","sessionId":"d16e2963-d9c9-45d8-a8f2-84024947adad","version":"1.0.69","gitBranch":"vlathgupta/shadow/cadence-skeleton","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_013DhiMvDeRrpP6ooFQp9Vt3","type":"tool_result","content":"commit 2b7d4040dcc270cb678bd63745d7171cffced614\nAuthor: vlathgupta <viren.lathgupta@doordash.com>\nDate:   Thu Aug 7 17:27:26 2025 -0700\n\n    [CATCP-1214]: Create skeleton for attribute extraction\n\ndiff --git a/services/nv-catalog-ml-infra/settings.gradle b/services/nv-catalog-ml-infra/settings.gradle\nindex 0e293abced5..336533fd6b6 100644\n--- a/services/nv-catalog-ml-infra/settings.gradle\n+++ b/services/nv-catalog-ml-infra/settings.gradle\n@@ -23,8 +23,8 @@ includeBuild \"../../libraries/catalog-ontology\"\n dependencyResolutionManagement {\n     versionCatalogs {\n         protoLibs {\n-            library('dd-protos-retailmlinfrav1-kotlin', 'com.doordash:protobuf-doordash.retail.ml_infra.v1-kotlin:0.5.2')\n-            library('dd-protos-nvcatalogv2-kotlin', 'com.doordash:protobuf-doordash.retail.catalog.v2-kotlin:0.11.+')\n+            library('dd-protos-retailmlinfrav1-kotlin', 'com.doordash:protobuf-doordash.retail.ml_infra.v1-kotlin:0.5.3')\n+            library('dd-protos-nvcatalogv2-kotlin', 'com.doordash:protobuf-doordash.retail.catalog.v2-kotlin:0.14.2')\n             library('dd-protos-ontology-kotlin', 'com.doordash:protobuf-ontology-kotlin:0.2.1')\n             library('dd-protos-argil', 'com.doordash:protobuf-argil:0.0.5')\n             library('dd-protos-common', 'com.doordash:protobuf-common:2.8.20')\ndiff --git a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/Main.kt b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/Main.kt\nindex b78532f7d71..decf5d21d23 100644\n--- a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/Main.kt\n+++ b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/Main.kt\n@@ -9,6 +9,7 @@ import com.doordash.asgard.guice_cadence.AsgardCadenceServerModule\n import com.doordash.asgard.guice_grpc.AsgardGrpcModule\n import com.doordash.nvcatalogmlinfra.module.AsgardKafkaProducerModule\n import com.doordash.nvcatalogmlinfra.module.AttributeExtractionModule\n+import com.doordash.nvcatalogmlinfra.module.AttributeExtractionWorkflowCadenceModule\n import com.doordash.nvcatalogmlinfra.module.CatalogServiceModule\n import com.doordash.nvcatalogmlinfra.module.GrpcServiceModule\n import com.doordash.nvcatalogmlinfra.module.InferenceWorkflowCadenceModule\n@@ -33,6 +34,7 @@ fun main() {\n                 GrpcServiceModule(),\n                 AsgardKafkaProducerModule(),\n                 InferenceWorkflowCadenceModule(),\n+                AttributeExtractionWorkflowCadenceModule(),\n                 AsgardCadenceClientModule(),\n                 AsgardCadenceServerModule(),\n                 OpenAIModule(),\n@@ -71,6 +73,7 @@ private fun createInferenceCadenceInjector() = Guice.createInjector(\n     GrpcServiceModule(),\n     AsgardKafkaProducerModule(),\n     InferenceWorkflowCadenceModule(),\n+    AttributeExtractionWorkflowCadenceModule(),\n     AsgardCadenceClientModule(),\n     AsgardCadenceServerModule(),\n     OpenAIModule(),\ndiff --git a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionAsgardCadenceWorkflow.kt b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionAsgardCadenceWorkflow.kt\nnew file mode 100644\nindex 00000000000..e04984e7203\n--- /dev/null\n+++ b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionAsgardCadenceWorkflow.kt\n@@ -0,0 +1,14 @@\n+package com.doordash.nvcatalogmlinfra.cadence.workflow\n+\n+import com.doordash.asgard.cadence.AsgardCadenceWorkflow\n+import com.google.inject.Inject\n+\n+class AttributeExtractionAsgardCadenceWorkflow @Inject constructor() : AsgardCadenceWorkflow {\n+    override fun getTaskList(): String = getAttributeExtractionWorkflowTaskList()\n+\n+    override fun getActivityImpls(): List<Any> = listOf(\n+        // TODO: Add activity implementations when needed\n+    )\n+\n+    override fun getWorkflowClass(): Class<*> = AttributeExtractionWorkflowImpl::class.java\n+}\ndiff --git a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflow.kt b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflow.kt\nnew file mode 100644\nindex 00000000000..2dbcc3b0e18\n--- /dev/null\n+++ b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflow.kt\n@@ -0,0 +1,22 @@\n+package com.doordash.nvcatalogmlinfra.cadence.workflow\n+\n+import com.doordash.nvcatalogmlinfra.utils.Constants.EXECUTION_START_TO_CLOSE_TIMEOUT_SECONDS\n+import com.doordash.nvcatalogmlinfra.utils.helpers.CadenceHelper\n+import com.uber.cadence.workflow.WorkflowMethod\n+\n+interface AttributeExtractionWorkflow {\n+\n+    @WorkflowMethod(\n+        name = name,\n+        executionStartToCloseTimeoutSeconds = EXECUTION_START_TO_CLOSE_TIMEOUT_SECONDS,\n+    )\n+    fun execute(params: AttributeExtractionWorkflowParams)\n+\n+    companion object {\n+        const val name = \"AttributeExtractionWorkflow\"\n+    }\n+}\n+\n+fun getAttributeExtractionWorkflowTaskList(): String = CadenceHelper.getWorkflowTaskList(\n+    \"AttributeExtractionWorkflow::TaskList\",\n+)\ndiff --git a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflowImpl.kt b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflowImpl.kt\nnew file mode 100644\nindex 00000000000..0613e2d54dd\n--- /dev/null\n+++ b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflowImpl.kt\n@@ -0,0 +1,20 @@\n+package com.doordash.nvcatalogmlinfra.cadence.workflow\n+\n+import com.doordash.asgard.logging.AsgardLogger\n+\n+class AttributeExtractionWorkflowImpl : AttributeExtractionWorkflow {\n+    private val logger = AsgardLogger.logger {}\n+\n+    override fun execute(params: AttributeExtractionWorkflowParams) {\n+        setLoggerContext(params)\n+        logger.info(\"AttributeExtraction workflow started.\")\n+\n+        // TODO: Implement attribute extraction workflow logic\n+\n+        logger.info(\"AttributeExtraction workflow finished.\")\n+    }\n+\n+    private fun setLoggerContext(params: AttributeExtractionWorkflowParams) {\n+        AsgardLogger.createTagsContext(mapOf(\"workflow_run_id\" to params.workflowId))\n+    }\n+}\ndiff --git a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflowParams.kt b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflowParams.kt\nnew file mode 100644\nindex 00000000000..18ac73732f3\n--- /dev/null\n+++ b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflowParams.kt\n@@ -0,0 +1,10 @@\n+package com.doordash.nvcatalogmlinfra.cadence.workflow\n+\n+import doordash.retail.catalog.v2.Common.SkuWithMetadata\n+import doordash.retail.ml_infra.v1.Serving.MLRequestMetaData\n+\n+data class AttributeExtractionWorkflowParams(\n+    val workflowId: String,\n+    val metadata: MLRequestMetaData,\n+    val skuWithMetadata: SkuWithMetadata,\n+)\ndiff --git a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/client/cadence/AttributeExtractionWorkflowClient.kt b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/client/cadence/AttributeExtractionWorkflowClient.kt\nnew file mode 100644\nindex 00000000000..15c161e3d15\n--- /dev/null\n+++ b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/client/cadence/AttributeExtractionWorkflowClient.kt\n@@ -0,0 +1,100 @@\n+package com.doordash.nvcatalogmlinfra.client.cadence\n+\n+import com.doordash.asgard.cadence.CadenceWorkflowClient\n+import com.doordash.asgard.logging.AsgardLogger\n+import com.doordash.logging.KontextLogger\n+import com.doordash.nvcatalogmlinfra.cadence.workflow.AttributeExtractionWorkflow\n+import com.doordash.nvcatalogmlinfra.cadence.workflow.AttributeExtractionWorkflowParams\n+import com.doordash.nvcatalogmlinfra.cadence.workflow.getAttributeExtractionWorkflowTaskList\n+import com.doordash.nvcatalogmlinfra.utils.Constants\n+import com.google.inject.Inject\n+import com.google.inject.Singleton\n+import com.uber.cadence.WorkflowIdReusePolicy\n+import com.uber.cadence.client.DuplicateWorkflowException\n+import com.uber.cadence.client.WorkflowClient\n+import com.uber.cadence.client.WorkflowException\n+import com.uber.cadence.client.WorkflowOptions\n+import com.uber.cadence.common.RetryOptions\n+import doordash.retail.catalog.v2.Common.SkuWithMetadata\n+import doordash.retail.ml_infra.v1.Serving.MLRequestMetaData\n+import java.time.Duration\n+\n+@Singleton\n+class AttributeExtractionWorkflowClient\n+@Inject\n+constructor(private val cadenceClient: CadenceWorkflowClient) {\n+    private val logger = KontextLogger.logger {}\n+\n+    private val retryOptions =\n+        RetryOptions.Builder()\n+            .setMaximumAttempts(Constants.WORKFLOW_RETRY_MAX_ATTEMPT)\n+            .setInitialInterval(Duration.ofSeconds(Constants.WORKFLOW_INITIAL_INTERVAL_SEC))\n+            .build()\n+\n+    @Suppress(\"TooGenericExceptionCaught\")\n+    fun triggerAttributeExtractionWorkflow(\n+        workflowId: String,\n+        metadata: MLRequestMetaData,\n+        skuWithMetadata: SkuWithMetadata,\n+        customizedRetryOptions: RetryOptions? = retryOptions,\n+    ) {\n+        setLoggerContext(workflowId)\n+        val taskList = getAttributeExtractionWorkflowTaskList()\n+\n+        logger.info(\"Task list for AttributeExtraction workflow is '$taskList'.\")\n+\n+        val options =\n+            WorkflowOptions.Builder()\n+                .setWorkflowId(workflowId)\n+                .setRetryOptions(customizedRetryOptions)\n+                .setWorkflowIdReusePolicy(WorkflowIdReusePolicy.RejectDuplicate)\n+                .setTaskList(taskList)\n+                .build()\n+\n+        val stub =\n+            cadenceClient.workflowClient.newWorkflowStub(\n+                AttributeExtractionWorkflow::class.java,\n+                options,\n+            )\n+\n+        try {\n+            WorkflowClient.start(\n+                stub::execute,\n+                AttributeExtractionWorkflowParams(\n+                    workflowId,\n+                    metadata,\n+                    skuWithMetadata,\n+                ),\n+            )\n+            logger\n+                .withValues(\n+                    \"metadata\" to metadata,\n+                    \"skuWithMetadata\" to skuWithMetadata,\n+                    \"taskList\" to taskList,\n+                )\n+                .info(\"Triggering AttributeExtraction workflow.\")\n+        } catch (e: Exception) {\n+            when (e) {\n+                is DuplicateWorkflowException ->\n+                    logger.error(\n+                        \"AttributeExtraction cadence workflow \" +\n+                            \"[${AttributeExtractionWorkflow.name}] is already running.\",\n+                    )\n+\n+                is WorkflowException ->\n+                    logger.error(\n+                        \"Exception while starting AttributeExtraction cadence workflow \" +\n+                            \"${AttributeExtractionWorkflow.name}\",\n+                        e,\n+                    )\n+\n+                else -> logger.error(\"AttributeExtraction workflow failed\", e)\n+            }\n+            throw e\n+        }\n+    }\n+\n+    private fun setLoggerContext(workflowId: String) {\n+        AsgardLogger.createTagsContext(mapOf(\"workflowId\" to workflowId))\n+    }\n+}\ndiff --git a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/grpc/MLInfraIServingServiceImpl.kt b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/grpc/MLInfraIServingServiceImpl.kt\nindex 950285d9a7d..a01cf3d3667 100644\n--- a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/grpc/MLInfraIServingServiceImpl.kt\n+++ b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/grpc/MLInfraIServingServiceImpl.kt\n@@ -3,6 +3,7 @@ package com.doordash.nvcatalogmlinfra.grpc\n import com.doordash.asgard.grpc.models.AsgardGrpcHandler\n import com.doordash.asgard.kafka.producer.AsgardKafkaProducer\n import com.doordash.asgard.logging.AsgardLogger\n+import com.doordash.nvcatalogmlinfra.client.cadence.AttributeExtractionWorkflowClient\n import com.doordash.nvcatalogmlinfra.client.cadence.InferenceWorkflowClient\n import com.doordash.nvcatalogmlinfra.grpc.InferenceServiceImpl.Companion.WORKFLOW_PREFIX\n import com.doordash.nvcatalogmlinfra.metrics.Metric\n@@ -23,6 +24,7 @@ import doordash.retail.ml_infra.v1.ItemMatch\n import doordash.retail.ml_infra.v1.MLInfraIServingServiceGrpcKt\n import doordash.retail.ml_infra.v1.Serving\n import doordash.retail.ml_infra.v1.Serving.ExtractAttributeResponse\n+import doordash.retail.ml_infra.v1.Serving.ExtractProductInformationResponse\n import doordash.retail.ml_infra.v1.Serving.GetPrimeMatchRequest\n import doordash.retail.ml_infra.v1.Serving.GetPrimeMatchResponse\n import doordash.retail.ml_infra.v1.Serving.GetProductTemplateAssignmentRequest\n@@ -46,6 +48,7 @@ import java.util.UUID\n class MLInfraIServingServiceImpl @Inject constructor(\n     @Named(\"producer\") private val kafkaProducer: AsgardKafkaProducer<String>,\n     private val inferenceWorkflowClient: InferenceWorkflowClient,\n+    private val attributeExtractionWorkflowClient: AttributeExtractionWorkflowClient,\n     private val dynamicValues: DynamicValues,\n     @Named(\"CatalogCandidateRetrievalServiceV1\") private val candidateRetrievalService: CandidateRetrievalService,\n ) : AsgardGrpcHandler, MLInfraIServingServiceGrpcKt.MLInfraIServingServiceCoroutineImplBase() {\n@@ -195,6 +198,34 @@ class MLInfraIServingServiceImpl @Inject constructor(\n         }\n     }\n \n+    @Suppress(\"TooGenericExceptionCaught\")\n+    override suspend fun extractProductInformation(\n+        request: Serving.ExtractProductInformationRequest,\n+    ): ExtractProductInformationResponse {\n+        val timer = Metric.timer(className, \"extractProductInformation\", Constants.METRIC_TIMER_LATENCY)\n+        logger.info(\"Inside extractProductInformation\")\n+\n+        val requestId = UUID.randomUUID().toString()\n+\n+        try {\n+            // Trigger AttributeExtraction Workflow\n+            attributeExtractionWorkflowClient.triggerAttributeExtractionWorkflow(\n+                requestId,\n+                request.metadata,\n+                request.sku,\n+            )\n+            logger.info(\"Started AttributeExtraction cadence workflow for ExtractProductInformation\")\n+        } catch (e: Exception) {\n+            logger.error(\"Failed to trigger AttributeExtraction workflow for ExtractProductInformation\", e)\n+            throw e\n+        }\n+\n+        timer.observeDuration()\n+        return ExtractProductInformationResponse.newBuilder()\n+            .setRequestId(StringValue.of(requestId))\n+            .build()\n+    }\n+\n     private fun checkRequest(request: GetPrimeMatchRequest) {\n         require(request.metadata.caller.value.isNotBlank()) { \"Caller cannot be blank.\" }\n         // TODO(mjia): Update the error message\ndiff --git a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/module/AttributeExtractionWorkflowCadenceModule.kt b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/module/AttributeExtractionWorkflowCadenceModule.kt\nnew file mode 100644\nindex 00000000000..e1586b89d10\n--- /dev/null\n+++ b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/module/AttributeExtractionWorkflowCadenceModule.kt\n@@ -0,0 +1,15 @@\n+package com.doordash.nvcatalogmlinfra.module\n+\n+import com.doordash.asgard.cadence.AsgardCadenceWorkflow\n+import com.doordash.nvcatalogmlinfra.cadence.workflow.AttributeExtractionAsgardCadenceWorkflow\n+import com.google.inject.AbstractModule\n+import com.google.inject.Inject\n+import com.google.inject.multibindings.ProvidesIntoSet\n+\n+class AttributeExtractionWorkflowCadenceModule : AbstractModule() {\n+\n+    @Suppress(\"Unused\")\n+    @ProvidesIntoSet\n+    @Inject\n+    fun getAttributeExtractionWorkflow(): AsgardCadenceWorkflow = AttributeExtractionAsgardCadenceWorkflow()\n+}\ndiff --git a/services/nv-catalog-ml-infra/src/test/kotlin/com/doordash/nvcatalogmlinfra/client/cadence/AttributeExtractionWorkflowClientTest.kt b/services/nv-catalog-ml-infra/src/test/kotlin/com/doordash/nvcatalogmlinfra/client/cadence/AttributeExtractionWorkflowClientTest.kt\nnew file mode 100644\nindex 00000000000..2527d91cff3\n--- /dev/null\n+++ b/services/nv-catalog-ml-infra/src/test/kotlin/com/doordash/nvcatalogmlinfra/client/cadence/AttributeExtractionWorkflowClientTest.kt\n@@ -0,0 +1,103 @@\n+package com.doordash.nvcatalogmlinfra.client.cadence\n+\n+import com.doordash.asgard.cadence.CadenceWorkflowClient\n+import com.doordash.nvcatalogmlinfra.cadence.workflow.AttributeExtractionWorkflow\n+import com.doordash.nvcatalogmlinfra.cadence.workflow.AttributeExtractionWorkflowParams\n+import com.uber.cadence.client.WorkflowClient\n+import com.uber.cadence.client.WorkflowOptions\n+import doordash.retail.catalog.v2.Common.SkuWithMetadata\n+import doordash.retail.ml_infra.v1.Serving.MLRequestMetaData\n+import io.mockk.coEvery\n+import io.mockk.coVerify\n+import io.mockk.impl.annotations.MockK\n+import io.mockk.junit5.MockKExtension\n+import io.mockk.verify\n+import org.junit.jupiter.api.BeforeEach\n+import org.junit.jupiter.api.Test\n+import org.junit.jupiter.api.extension.ExtendWith\n+\n+@ExtendWith(MockKExtension::class)\n+class AttributeExtractionWorkflowClientTest {\n+\n+    @MockK\n+    private lateinit var cadenceClient: CadenceWorkflowClient\n+\n+    @MockK\n+    private lateinit var workflowClient: WorkflowClient\n+\n+    @MockK\n+    private lateinit var attributeExtractionWorkflow: AttributeExtractionWorkflow\n+\n+    private lateinit var attributeExtractionWorkflowClient: AttributeExtractionWorkflowClient\n+\n+    @BeforeEach\n+    fun setUp() {\n+        attributeExtractionWorkflowClient = AttributeExtractionWorkflowClient(cadenceClient)\n+        coEvery { cadenceClient.workflowClient } returns workflowClient\n+        coEvery {\n+            workflowClient.newWorkflowStub(\n+                AttributeExtractionWorkflow::class.java,\n+                any<WorkflowOptions>(),\n+            )\n+        } returns attributeExtractionWorkflow\n+    }\n+\n+    @Test\n+    fun `trigger AttributeExtractionWorkflow happy path`() {\n+        // Prepare\n+        val workflowUuid = \"workflow_uuid_1\"\n+        val metadata = MLRequestMetaData.getDefaultInstance()\n+        val skuWithMetadata = SkuWithMetadata.getDefaultInstance()\n+\n+        coEvery { attributeExtractionWorkflow.execute(any()) } returns Unit\n+\n+        // Act\n+        attributeExtractionWorkflowClient.triggerAttributeExtractionWorkflow(\n+            workflowUuid,\n+            metadata,\n+            skuWithMetadata,\n+        )\n+\n+        // Verify\n+        coVerify(exactly = 1) {\n+            workflowClient.newWorkflowStub(\n+                AttributeExtractionWorkflow::class.java,\n+                any<WorkflowOptions>(),\n+            )\n+        }\n+        verify(exactly = 1) {\n+            attributeExtractionWorkflow.execute(\n+                AttributeExtractionWorkflowParams(\n+                    workflowUuid,\n+                    metadata,\n+                    skuWithMetadata,\n+                ),\n+            )\n+        }\n+    }\n+\n+    @Test\n+    fun `trigger AttributeExtractionWorkflow with default instances`() {\n+        // Prepare\n+        val workflowUuid = \"workflow_uuid_2\"\n+        val metadata = MLRequestMetaData.getDefaultInstance()\n+        val skuWithMetadata = SkuWithMetadata.getDefaultInstance()\n+\n+        coEvery { attributeExtractionWorkflow.execute(any()) } returns Unit\n+\n+        // Act & Assert - should not throw exception\n+        attributeExtractionWorkflowClient.triggerAttributeExtractionWorkflow(\n+            workflowUuid,\n+            metadata,\n+            skuWithMetadata,\n+        )\n+\n+        // Verify workflow was triggered\n+        coVerify(exactly = 1) {\n+            workflowClient.newWorkflowStub(\n+                AttributeExtractionWorkflow::class.java,\n+                any<WorkflowOptions>(),\n+            )\n+        }\n+    }\n+}\ndiff --git a/services/nv-catalog-ml-infra/src/test/kotlin/com/doordash/nvcatalogmlinfra/grpc/MLInfraIServingServiceImplTest.kt b/services/nv-catalog-ml-infra/src/test/kotlin/com/doordash/nvcatalogmlinfra/grpc/MLInfraIServingServiceImplTest.kt\nindex 2e3c230e725..5da0e44e825 100644\n--- a/services/nv-catalog-ml-infra/src/test/kotlin/com/doordash/nvcatalogmlinfra/grpc/MLInfraIServingServiceImplTest.kt\n+++ b/services/nv-catalog-ml-infra/src/test/kotlin/com/doordash/nvcatalogmlinfra/grpc/MLInfraIServingServiceImplTest.kt\n@@ -1,6 +1,7 @@\n package com.doordash.nvcatalogmlinfra.grpc\n \n import com.doordash.asgard.kafka.producer.AsgardKafkaProducer\n+import com.doordash.nvcatalogmlinfra.client.cadence.AttributeExtractionWorkflowClient\n import com.doordash.nvcatalogmlinfra.client.cadence.InferenceWorkflowClient\n import com.doordash.nvcatalogmlinfra.functions.candidateretrieval.RetrieverType\n import com.doordash.nvcatalogmlinfra.model.ArgilModelType\n@@ -10,6 +11,7 @@ import com.doordash.nvcatalogmlinfra.service.v2.CandidateRetrievalService\n import com.doordash.nvcatalogmlinfra.utils.runtime.DynamicValues\n import com.doordash.rpc.common.Code\n import com.google.protobuf.FloatValue\n+import com.google.protobuf.StringValue\n import data.proto.MLInfraIServingServiceData.aGetPrimeMatchRequest\n import data.proto.MLInfraIServingServiceData.aIntraMerchantEntityResolutionRequest\n import data.proto.MLInfraIServingServiceData.aProduct\n@@ -42,6 +44,9 @@ class MLInfraIServingServiceImplTest {\n     @MockK\n     lateinit var inferenceWorkflowClient: InferenceWorkflowClient\n \n+    @MockK\n+    lateinit var attributeExtractionWorkflowClient: AttributeExtractionWorkflowClient\n+\n     @MockK\n     lateinit var dynamicValues: DynamicValues\n \n@@ -219,4 +224,44 @@ class MLInfraIServingServiceImplTest {\n             mlInfraIServingService.retrieveCandidates(Serving.RetrieveCandidatesRequest.getDefaultInstance())\n         }\n     }\n+\n+    @Test\n+    fun `extractProductInformation cadence flow happy path, no exception`(): Unit = runBlocking {\n+        val request = Serving.ExtractProductInformationRequest.newBuilder()\n+            .setMetadata(\n+                Serving.MLRequestMetaData.newBuilder()\n+                    .setRequestId(StringValue.of(\"test-request-id\"))\n+                    .setCallbackToken(StringValue.of(\"test-token\"))\n+                    .setCaller(StringValue.of(\"test-caller\"))\n+                    .build(),\n+            )\n+            .build()\n+\n+        justRun { attributeExtractionWorkflowClient.triggerAttributeExtractionWorkflow(any(), any(), any()) }\n+\n+        val response = mlInfraIServingService.extractProductInformation(request)\n+        Assertions.assertEquals(Code.OK, response.code)\n+        Assertions.assertTrue(response.requestId.value.isNotEmpty())\n+    }\n+\n+    @Test\n+    fun `extractProductInformation unhappy path, with exception`(): Unit = runBlocking {\n+        val request = Serving.ExtractProductInformationRequest.newBuilder()\n+            .setMetadata(\n+                Serving.MLRequestMetaData.newBuilder()\n+                    .setRequestId(StringValue.of(\"test-request-id\"))\n+                    .setCallbackToken(StringValue.of(\"test-token\"))\n+                    .setCaller(StringValue.of(\"test-caller\"))\n+                    .build(),\n+            )\n+            .build()\n+\n+        every {\n+            attributeExtractionWorkflowClient.triggerAttributeExtractionWorkflow(any(), any(), any())\n+        } throws RuntimeException(\"Workflow failed\")\n+\n+        assertThrows<RuntimeException> {\n+            mlInfraIServingService.extractProductInformation(request)\n+        }\n+    }\n }\ndiff --git a/services/nv-catalog-ml-infra/src/test/kotlin/data/proto/MLInfraIServingServiceData.kt b/services/nv-catalog-ml-infra/src/test/kotlin/data/proto/MLInfraIServingServiceData.kt\nindex 03b9cf4ea60..576872a8135 100644\n--- a/services/nv-catalog-ml-infra/src/test/kotlin/data/proto/MLInfraIServingServiceData.kt\n+++ b/services/nv-catalog-ml-infra/src/test/kotlin/data/proto/MLInfraIServingServiceData.kt\n@@ -73,11 +73,13 @@ object MLInfraIServingServiceData {\n         skuIdentifier: SkuIdentifier = aSkuIdentifier(),\n         skuProduct: BaselineSKUAttributes = aSkuProduct(),\n         productTemplateAssignment: ProductTemplateAssignment = aProductTemplateAssignment(),\n+        photos: List<Common.ProcessedPhoto> = emptyList(),\n     ) = extractAttributeRequest {\n         this.metadata = metadata\n         this.skuWithMetadata = skuWithMetadata {\n             identifier = skuIdentifier\n             product = skuProduct\n+            this.photos.addAll(photos)\n         }\n         this.templateAssignment = productTemplateAssignment\n     }\ndiff --git a/services/nv-catalog-ml-infra/src/test/resources/testdata/argil/request/attribute_extraction_argil_request.json b/services/nv-catalog-ml-infra/src/test/resources/testdata/argil/request/attribute_extraction_argil_request.json\nindex 84a345eba8f..548ae6f5d73 100644\n--- a/services/nv-catalog-ml-infra/src/test/resources/testdata/argil/request/attribute_extraction_argil_request.json\n+++ b/services/nv-catalog-ml-infra/src/test/resources/testdata/argil/request/attribute_extraction_argil_request.json\n@@ -2,7 +2,7 @@\n   \"request_id\": \"123_msid\",\n   \"parameters\": {\n     \"input\": {\n-      \"string_param\": \"{\\\"metadata\\\":{\\\"callback_token\\\":\\\"test_token\\\",\\\"request_id\\\":\\\"1\\\",\\\"caller\\\":\\\"caller-service-name\\\"},\\\"sku_with_metadata\\\":{\\\"identifier\\\":{\\\"id\\\":\\\"esku_id\\\",\\\"baseline_sku_hash\\\":\\\"bsku_id\\\",\\\"baseline_sku_version\\\":\\\"bsku_version\\\",\\\"business_id\\\":\\\"123\\\",\\\"merchant_supplied_id\\\":\\\"msid\\\"},\\\"product\\\":{\\\"product\\\":{\\\"raw_merchant_item_name\\\":\\\"COLORADO PREMIUM CORNED BEEF ROUND FLAT\\\",\\\"l1_category\\\":\\\"Meat \\\\u0026 Seafood\\\",\\\"l2_category\\\":\\\"SMOKED/CURED BEEF\\\",\\\"upc\\\":\\\"25210400000\\\",\\\"secondary_upc\\\":[],\\\"brand_name\\\":\\\"COLORADO\\\",\\\"size\\\":\\\"1\\\",\\\"is_alcohol\\\":false,\\\"is_weighted_item\\\":true,\\\"unit_of_measurement\\\":\\\"LB\\\",\\\"additional_image_urls\\\":[],\\\"variant\\\":[],\\\"nutritional_info\\\":[],\\\"ingredients\\\":[],\\\"dietary_flags\\\":[],\\\"snap_eligible\\\":true,\\\"product_attributes\\\":{}},\\\"other_attributes\\\":[],\\\"unknown_attributes\\\":{}}},\\\"template_assignment\\\":{\\\"product_template_id\\\":\\\"c881a806-c6de-4bff-91ee-44d412aa28d8\\\",\\\"product_template_version\\\":\\\"1717174880784\\\",\\\"product_template_name\\\":\\\"Beef Template\\\",\\\"metadata\\\":[{\\\"metadata_field\\\":\\\"product_category_id\\\",\\\"metadata_value\\\":\\\"123\\\"}],\\\"confidence\\\":{\\\"score\\\":0.9999,\\\"confidence_level\\\":2}}}\"\n+      \"string_param\": \"{\\\"metadata\\\":{\\\"callback_token\\\":\\\"test_token\\\",\\\"request_id\\\":\\\"1\\\",\\\"caller\\\":\\\"caller-service-name\\\"},\\\"sku_with_metadata\\\":{\\\"identifier\\\":{\\\"id\\\":\\\"esku_id\\\",\\\"baseline_sku_hash\\\":\\\"bsku_id\\\",\\\"baseline_sku_version\\\":\\\"bsku_version\\\",\\\"business_id\\\":\\\"123\\\",\\\"merchant_supplied_id\\\":\\\"msid\\\"},\\\"product\\\":{\\\"product\\\":{\\\"raw_merchant_item_name\\\":\\\"COLORADO PREMIUM CORNED BEEF ROUND FLAT\\\",\\\"l1_category\\\":\\\"Meat \\\\u0026 Seafood\\\",\\\"l2_category\\\":\\\"SMOKED/CURED BEEF\\\",\\\"upc\\\":\\\"25210400000\\\",\\\"secondary_upc\\\":[],\\\"brand_name\\\":\\\"COLORADO\\\",\\\"size\\\":\\\"1\\\",\\\"is_alcohol\\\":false,\\\"is_weighted_item\\\":true,\\\"unit_of_measurement\\\":\\\"LB\\\",\\\"additional_image_urls\\\":[],\\\"variant\\\":[],\\\"nutritional_info\\\":[],\\\"ingredients\\\":[],\\\"dietary_flags\\\":[],\\\"snap_eligible\\\":true,\\\"product_attributes\\\":{}},\\\"other_attributes\\\":[],\\\"unknown_attributes\\\":{}},\\\"photos\\\":[]},\\\"template_assignment\\\":{\\\"product_template_id\\\":\\\"c881a806-c6de-4bff-91ee-44d412aa28d8\\\",\\\"product_template_version\\\":\\\"1717174880784\\\",\\\"product_template_name\\\":\\\"Beef Template\\\",\\\"metadata\\\":[{\\\"metadata_field\\\":\\\"product_category_id\\\",\\\"metadata_value\\\":\\\"123\\\"}],\\\"confidence\\\":{\\\"score\\\":0.9999,\\\"confidence_level\\\":2}}}\"\n     }\n   },\n   \"inputs\": [],\ndiff --git a/services/nv-catalog-ml-infra/src/test/resources/testdata/argil/request/product_template_assignment_request.json b/services/nv-catalog-ml-infra/src/test/resources/testdata/argil/request/product_template_assignment_request.json\nindex c1f5eb0ed2d..955c63251b4 100644\n--- a/services/nv-catalog-ml-infra/src/test/resources/testdata/argil/request/product_template_assignment_request.json\n+++ b/services/nv-catalog-ml-infra/src/test/resources/testdata/argil/request/product_template_assignment_request.json\n@@ -4,7 +4,7 @@\n   \"request_id\": \"123_msid\",\n   \"parameters\": {\n     \"input\": {\n-      \"string_param\": \"{\\\"metadata\\\":{\\\"callback_token\\\":\\\"test_token\\\",\\\"request_id\\\":\\\"1\\\",\\\"caller\\\":\\\"caller-service-name\\\"},\\\"sku\\\":{\\\"identifier\\\":{\\\"id\\\":\\\"esku_id\\\",\\\"baseline_sku_hash\\\":\\\"bsku_id\\\",\\\"baseline_sku_version\\\":\\\"bsku_version\\\",\\\"business_id\\\":\\\"123\\\",\\\"merchant_supplied_id\\\":\\\"msid\\\"},\\\"product\\\":{\\\"product\\\":{\\\"raw_merchant_item_name\\\":\\\"COLORADO PREMIUM CORNED BEEF ROUND FLAT\\\",\\\"l1_category\\\":\\\"Meat \\\\u0026 Seafood\\\",\\\"l2_category\\\":\\\"SMOKED/CURED BEEF\\\",\\\"upc\\\":\\\"25210400000\\\",\\\"secondary_upc\\\":[],\\\"brand_name\\\":\\\"COLORADO\\\",\\\"size\\\":\\\"1\\\",\\\"is_alcohol\\\":false,\\\"is_weighted_item\\\":true,\\\"unit_of_measurement\\\":\\\"LB\\\",\\\"additional_image_urls\\\":[],\\\"variant\\\":[],\\\"nutritional_info\\\":[],\\\"ingredients\\\":[],\\\"dietary_flags\\\":[],\\\"snap_eligible\\\":true,\\\"product_attributes\\\":{}},\\\"other_attributes\\\":[],\\\"unknown_attributes\\\":{}}}}\"\n+      \"string_param\": \"{\\\"metadata\\\":{\\\"callback_token\\\":\\\"test_token\\\",\\\"request_id\\\":\\\"1\\\",\\\"caller\\\":\\\"caller-service-name\\\"},\\\"sku\\\":{\\\"identifier\\\":{\\\"id\\\":\\\"esku_id\\\",\\\"baseline_sku_hash\\\":\\\"bsku_id\\\",\\\"baseline_sku_version\\\":\\\"bsku_version\\\",\\\"business_id\\\":\\\"123\\\",\\\"merchant_supplied_id\\\":\\\"msid\\\"},\\\"product\\\":{\\\"product\\\":{\\\"raw_merchant_item_name\\\":\\\"COLORADO PREMIUM CORNED BEEF ROUND FLAT\\\",\\\"l1_category\\\":\\\"Meat \\\\u0026 Seafood\\\",\\\"l2_category\\\":\\\"SMOKE\n\n... [4 lines truncated] ...","is_error":false}]},"uuid":"127999b2-bb56-4412-900a-0f04a15379bc","timestamp":"2025-08-08T22:13:25.179Z","toolUseResult":{"stdout":"commit 2b7d4040dcc270cb678bd63745d7171cffced614\nAuthor: vlathgupta <viren.lathgupta@doordash.com>\nDate:   Thu Aug 7 17:27:26 2025 -0700\n\n    [CATCP-1214]: Create skeleton for attribute extraction\n\ndiff --git a/services/nv-catalog-ml-infra/settings.gradle b/services/nv-catalog-ml-infra/settings.gradle\nindex 0e293abced5..336533fd6b6 100644\n--- a/services/nv-catalog-ml-infra/settings.gradle\n+++ b/services/nv-catalog-ml-infra/settings.gradle\n@@ -23,8 +23,8 @@ includeBuild \"../../libraries/catalog-ontology\"\n dependencyResolutionManagement {\n     versionCatalogs {\n         protoLibs {\n-            library('dd-protos-retailmlinfrav1-kotlin', 'com.doordash:protobuf-doordash.retail.ml_infra.v1-kotlin:0.5.2')\n-            library('dd-protos-nvcatalogv2-kotlin', 'com.doordash:protobuf-doordash.retail.catalog.v2-kotlin:0.11.+')\n+            library('dd-protos-retailmlinfrav1-kotlin', 'com.doordash:protobuf-doordash.retail.ml_infra.v1-kotlin:0.5.3')\n+            library('dd-protos-nvcatalogv2-kotlin', 'com.doordash:protobuf-doordash.retail.catalog.v2-kotlin:0.14.2')\n             library('dd-protos-ontology-kotlin', 'com.doordash:protobuf-ontology-kotlin:0.2.1')\n             library('dd-protos-argil', 'com.doordash:protobuf-argil:0.0.5')\n             library('dd-protos-common', 'com.doordash:protobuf-common:2.8.20')\ndiff --git a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/Main.kt b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/Main.kt\nindex b78532f7d71..decf5d21d23 100644\n--- a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/Main.kt\n+++ b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/Main.kt\n@@ -9,6 +9,7 @@ import com.doordash.asgard.guice_cadence.AsgardCadenceServerModule\n import com.doordash.asgard.guice_grpc.AsgardGrpcModule\n import com.doordash.nvcatalogmlinfra.module.AsgardKafkaProducerModule\n import com.doordash.nvcatalogmlinfra.module.AttributeExtractionModule\n+import com.doordash.nvcatalogmlinfra.module.AttributeExtractionWorkflowCadenceModule\n import com.doordash.nvcatalogmlinfra.module.CatalogServiceModule\n import com.doordash.nvcatalogmlinfra.module.GrpcServiceModule\n import com.doordash.nvcatalogmlinfra.module.InferenceWorkflowCadenceModule\n@@ -33,6 +34,7 @@ fun main() {\n                 GrpcServiceModule(),\n                 AsgardKafkaProducerModule(),\n                 InferenceWorkflowCadenceModule(),\n+                AttributeExtractionWorkflowCadenceModule(),\n                 AsgardCadenceClientModule(),\n                 AsgardCadenceServerModule(),\n                 OpenAIModule(),\n@@ -71,6 +73,7 @@ private fun createInferenceCadenceInjector() = Guice.createInjector(\n     GrpcServiceModule(),\n     AsgardKafkaProducerModule(),\n     InferenceWorkflowCadenceModule(),\n+    AttributeExtractionWorkflowCadenceModule(),\n     AsgardCadenceClientModule(),\n     AsgardCadenceServerModule(),\n     OpenAIModule(),\ndiff --git a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionAsgardCadenceWorkflow.kt b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionAsgardCadenceWorkflow.kt\nnew file mode 100644\nindex 00000000000..e04984e7203\n--- /dev/null\n+++ b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionAsgardCadenceWorkflow.kt\n@@ -0,0 +1,14 @@\n+package com.doordash.nvcatalogmlinfra.cadence.workflow\n+\n+import com.doordash.asgard.cadence.AsgardCadenceWorkflow\n+import com.google.inject.Inject\n+\n+class AttributeExtractionAsgardCadenceWorkflow @Inject constructor() : AsgardCadenceWorkflow {\n+    override fun getTaskList(): String = getAttributeExtractionWorkflowTaskList()\n+\n+    override fun getActivityImpls(): List<Any> = listOf(\n+        // TODO: Add activity implementations when needed\n+    )\n+\n+    override fun getWorkflowClass(): Class<*> = AttributeExtractionWorkflowImpl::class.java\n+}\ndiff --git a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflow.kt b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflow.kt\nnew file mode 100644\nindex 00000000000..2dbcc3b0e18\n--- /dev/null\n+++ b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflow.kt\n@@ -0,0 +1,22 @@\n+package com.doordash.nvcatalogmlinfra.cadence.workflow\n+\n+import com.doordash.nvcatalogmlinfra.utils.Constants.EXECUTION_START_TO_CLOSE_TIMEOUT_SECONDS\n+import com.doordash.nvcatalogmlinfra.utils.helpers.CadenceHelper\n+import com.uber.cadence.workflow.WorkflowMethod\n+\n+interface AttributeExtractionWorkflow {\n+\n+    @WorkflowMethod(\n+        name = name,\n+        executionStartToCloseTimeoutSeconds = EXECUTION_START_TO_CLOSE_TIMEOUT_SECONDS,\n+    )\n+    fun execute(params: AttributeExtractionWorkflowParams)\n+\n+    companion object {\n+        const val name = \"AttributeExtractionWorkflow\"\n+    }\n+}\n+\n+fun getAttributeExtractionWorkflowTaskList(): String = CadenceHelper.getWorkflowTaskList(\n+    \"AttributeExtractionWorkflow::TaskList\",\n+)\ndiff --git a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflowImpl.kt b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflowImpl.kt\nnew file mode 100644\nindex 00000000000..0613e2d54dd\n--- /dev/null\n+++ b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflowImpl.kt\n@@ -0,0 +1,20 @@\n+package com.doordash.nvcatalogmlinfra.cadence.workflow\n+\n+import com.doordash.asgard.logging.AsgardLogger\n+\n+class AttributeExtractionWorkflowImpl : AttributeExtractionWorkflow {\n+    private val logger = AsgardLogger.logger {}\n+\n+    override fun execute(params: AttributeExtractionWorkflowParams) {\n+        setLoggerContext(params)\n+        logger.info(\"AttributeExtraction workflow started.\")\n+\n+        // TODO: Implement attribute extraction workflow logic\n+\n+        logger.info(\"AttributeExtraction workflow finished.\")\n+    }\n+\n+    private fun setLoggerContext(params: AttributeExtractionWorkflowParams) {\n+        AsgardLogger.createTagsContext(mapOf(\"workflow_run_id\" to params.workflowId))\n+    }\n+}\ndiff --git a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflowParams.kt b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflowParams.kt\nnew file mode 100644\nindex 00000000000..18ac73732f3\n--- /dev/null\n+++ b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/cadence/workflow/AttributeExtractionWorkflowParams.kt\n@@ -0,0 +1,10 @@\n+package com.doordash.nvcatalogmlinfra.cadence.workflow\n+\n+import doordash.retail.catalog.v2.Common.SkuWithMetadata\n+import doordash.retail.ml_infra.v1.Serving.MLRequestMetaData\n+\n+data class AttributeExtractionWorkflowParams(\n+    val workflowId: String,\n+    val metadata: MLRequestMetaData,\n+    val skuWithMetadata: SkuWithMetadata,\n+)\ndiff --git a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/client/cadence/AttributeExtractionWorkflowClient.kt b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/client/cadence/AttributeExtractionWorkflowClient.kt\nnew file mode 100644\nindex 00000000000..15c161e3d15\n--- /dev/null\n+++ b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/client/cadence/AttributeExtractionWorkflowClient.kt\n@@ -0,0 +1,100 @@\n+package com.doordash.nvcatalogmlinfra.client.cadence\n+\n+import com.doordash.asgard.cadence.CadenceWorkflowClient\n+import com.doordash.asgard.logging.AsgardLogger\n+import com.doordash.logging.KontextLogger\n+import com.doordash.nvcatalogmlinfra.cadence.workflow.AttributeExtractionWorkflow\n+import com.doordash.nvcatalogmlinfra.cadence.workflow.AttributeExtractionWorkflowParams\n+import com.doordash.nvcatalogmlinfra.cadence.workflow.getAttributeExtractionWorkflowTaskList\n+import com.doordash.nvcatalogmlinfra.utils.Constants\n+import com.google.inject.Inject\n+import com.google.inject.Singleton\n+import com.uber.cadence.WorkflowIdReusePolicy\n+import com.uber.cadence.client.DuplicateWorkflowException\n+import com.uber.cadence.client.WorkflowClient\n+import com.uber.cadence.client.WorkflowException\n+import com.uber.cadence.client.WorkflowOptions\n+import com.uber.cadence.common.RetryOptions\n+import doordash.retail.catalog.v2.Common.SkuWithMetadata\n+import doordash.retail.ml_infra.v1.Serving.MLRequestMetaData\n+import java.time.Duration\n+\n+@Singleton\n+class AttributeExtractionWorkflowClient\n+@Inject\n+constructor(private val cadenceClient: CadenceWorkflowClient) {\n+    private val logger = KontextLogger.logger {}\n+\n+    private val retryOptions =\n+        RetryOptions.Builder()\n+            .setMaximumAttempts(Constants.WORKFLOW_RETRY_MAX_ATTEMPT)\n+            .setInitialInterval(Duration.ofSeconds(Constants.WORKFLOW_INITIAL_INTERVAL_SEC))\n+            .build()\n+\n+    @Suppress(\"TooGenericExceptionCaught\")\n+    fun triggerAttributeExtractionWorkflow(\n+        workflowId: String,\n+        metadata: MLRequestMetaData,\n+        skuWithMetadata: SkuWithMetadata,\n+        customizedRetryOptions: RetryOptions? = retryOptions,\n+    ) {\n+        setLoggerContext(workflowId)\n+        val taskList = getAttributeExtractionWorkflowTaskList()\n+\n+        logger.info(\"Task list for AttributeExtraction workflow is '$taskList'.\")\n+\n+        val options =\n+            WorkflowOptions.Builder()\n+                .setWorkflowId(workflowId)\n+                .setRetryOptions(customizedRetryOptions)\n+                .setWorkflowIdReusePolicy(WorkflowIdReusePolicy.RejectDuplicate)\n+                .setTaskList(taskList)\n+                .build()\n+\n+        val stub =\n+            cadenceClient.workflowClient.newWorkflowStub(\n+                AttributeExtractionWorkflow::class.java,\n+                options,\n+            )\n+\n+        try {\n+            WorkflowClient.start(\n+                stub::execute,\n+                AttributeExtractionWorkflowParams(\n+                    workflowId,\n+                    metadata,\n+                    skuWithMetadata,\n+                ),\n+            )\n+            logger\n+                .withValues(\n+                    \"metadata\" to metadata,\n+                    \"skuWithMetadata\" to skuWithMetadata,\n+                    \"taskList\" to taskList,\n+                )\n+                .info(\"Triggering AttributeExtraction workflow.\")\n+        } catch (e: Exception) {\n+            when (e) {\n+                is DuplicateWorkflowException ->\n+                    logger.error(\n+                        \"AttributeExtraction cadence workflow \" +\n+                            \"[${AttributeExtractionWorkflow.name}] is already running.\",\n+                    )\n+\n+                is WorkflowException ->\n+                    logger.error(\n+                        \"Exception while starting AttributeExtraction cadence workflow \" +\n+                            \"${AttributeExtractionWorkflow.name}\",\n+                        e,\n+                    )\n+\n+                else -> logger.error(\"AttributeExtraction workflow failed\", e)\n+            }\n+            throw e\n+        }\n+    }\n+\n+    private fun setLoggerContext(workflowId: String) {\n+        AsgardLogger.createTagsContext(mapOf(\"workflowId\" to workflowId))\n+    }\n+}\ndiff --git a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/grpc/MLInfraIServingServiceImpl.kt b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/grpc/MLInfraIServingServiceImpl.kt\nindex 950285d9a7d..a01cf3d3667 100644\n--- a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/grpc/MLInfraIServingServiceImpl.kt\n+++ b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/grpc/MLInfraIServingServiceImpl.kt\n@@ -3,6 +3,7 @@ package com.doordash.nvcatalogmlinfra.grpc\n import com.doordash.asgard.grpc.models.AsgardGrpcHandler\n import com.doordash.asgard.kafka.producer.AsgardKafkaProducer\n import com.doordash.asgard.logging.AsgardLogger\n+import com.doordash.nvcatalogmlinfra.client.cadence.AttributeExtractionWorkflowClient\n import com.doordash.nvcatalogmlinfra.client.cadence.InferenceWorkflowClient\n import com.doordash.nvcatalogmlinfra.grpc.InferenceServiceImpl.Companion.WORKFLOW_PREFIX\n import com.doordash.nvcatalogmlinfra.metrics.Metric\n@@ -23,6 +24,7 @@ import doordash.retail.ml_infra.v1.ItemMatch\n import doordash.retail.ml_infra.v1.MLInfraIServingServiceGrpcKt\n import doordash.retail.ml_infra.v1.Serving\n import doordash.retail.ml_infra.v1.Serving.ExtractAttributeResponse\n+import doordash.retail.ml_infra.v1.Serving.ExtractProductInformationResponse\n import doordash.retail.ml_infra.v1.Serving.GetPrimeMatchRequest\n import doordash.retail.ml_infra.v1.Serving.GetPrimeMatchResponse\n import doordash.retail.ml_infra.v1.Serving.GetProductTemplateAssignmentRequest\n@@ -46,6 +48,7 @@ import java.util.UUID\n class MLInfraIServingServiceImpl @Inject constructor(\n     @Named(\"producer\") private val kafkaProducer: AsgardKafkaProducer<String>,\n     private val inferenceWorkflowClient: InferenceWorkflowClient,\n+    private val attributeExtractionWorkflowClient: AttributeExtractionWorkflowClient,\n     private val dynamicValues: DynamicValues,\n     @Named(\"CatalogCandidateRetrievalServiceV1\") private val candidateRetrievalService: CandidateRetrievalService,\n ) : AsgardGrpcHandler, MLInfraIServingServiceGrpcKt.MLInfraIServingServiceCoroutineImplBase() {\n@@ -195,6 +198,34 @@ class MLInfraIServingServiceImpl @Inject constructor(\n         }\n     }\n \n+    @Suppress(\"TooGenericExceptionCaught\")\n+    override suspend fun extractProductInformation(\n+        request: Serving.ExtractProductInformationRequest,\n+    ): ExtractProductInformationResponse {\n+        val timer = Metric.timer(className, \"extractProductInformation\", Constants.METRIC_TIMER_LATENCY)\n+        logger.info(\"Inside extractProductInformation\")\n+\n+        val requestId = UUID.randomUUID().toString()\n+\n+        try {\n+            // Trigger AttributeExtraction Workflow\n+            attributeExtractionWorkflowClient.triggerAttributeExtractionWorkflow(\n+                requestId,\n+                request.metadata,\n+                request.sku,\n+            )\n+            logger.info(\"Started AttributeExtraction cadence workflow for ExtractProductInformation\")\n+        } catch (e: Exception) {\n+            logger.error(\"Failed to trigger AttributeExtraction workflow for ExtractProductInformation\", e)\n+            throw e\n+        }\n+\n+        timer.observeDuration()\n+        return ExtractProductInformationResponse.newBuilder()\n+            .setRequestId(StringValue.of(requestId))\n+            .build()\n+    }\n+\n     private fun checkRequest(request: GetPrimeMatchRequest) {\n         require(request.metadata.caller.value.isNotBlank()) { \"Caller cannot be blank.\" }\n         // TODO(mjia): Update the error message\ndiff --git a/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/module/AttributeExtractionWorkflowCadenceModule.kt b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/module/AttributeExtractionWorkflowCadenceModule.kt\nnew file mode 100644\nindex 00000000000..e1586b89d10\n--- /dev/null\n+++ b/services/nv-catalog-ml-infra/src/main/kotlin/com/doordash/nvcatalogmlinfra/module/AttributeExtractionWorkflowCadenceModule.kt\n@@ -0,0 +1,15 @@\n+package com.doordash.nvcatalogmlinfra.module\n+\n+import com.doordash.asgard.cadence.AsgardCadenceWorkflow\n+import com.doordash.nvcatalogmlinfra.cadence.workflow.AttributeExtractionAsgardCadenceWorkflow\n+import com.google.inject.AbstractModule\n+import com.google.inject.Inject\n+import com.google.inject.multibindings.ProvidesIntoSet\n+\n+class AttributeExtractionWorkflowCadenceModule : AbstractModule() {\n+\n+    @Suppress(\"Unused\")\n+    @ProvidesIntoSet\n+    @Inject\n+    fun getAttributeExtractionWorkflow(): AsgardCadenceWorkflow = AttributeExtractionAsgardCadenceWorkflow()\n+}\ndiff --git a/services/nv-catalog-ml-infra/src/test/kotlin/com/doordash/nvcatalogmlinfra/client/cadence/AttributeExtractionWorkflowClientTest.kt b/services/nv-catalog-ml-infra/src/test/kotlin/com/doordash/nvcatalogmlinfra/client/cadence/AttributeExtractionWorkflowClientTest.kt\nnew file mode 100644\nindex 00000000000..2527d91cff3\n--- /dev/null\n+++ b/services/nv-catalog-ml-infra/src/test/kotlin/com/doordash/nvcatalogmlinfra/client/cadence/AttributeExtractionWorkflowClientTest.kt\n@@ -0,0 +1,103 @@\n+package com.doordash.nvcatalogmlinfra.client.cadence\n+\n+import com.doordash.asgard.cadence.CadenceWorkflowClient\n+import com.doordash.nvcatalogmlinfra.cadence.workflow.AttributeExtractionWorkflow\n+import com.doordash.nvcatalogmlinfra.cadence.workflow.AttributeExtractionWorkflowParams\n+import com.uber.cadence.client.WorkflowClient\n+import com.uber.cadence.client.WorkflowOptions\n+import doordash.retail.catalog.v2.Common.SkuWithMetadata\n+import doordash.retail.ml_infra.v1.Serving.MLRequestMetaData\n+import io.mockk.coEvery\n+import io.mockk.coVerify\n+import io.mockk.impl.annotations.MockK\n+import io.mockk.junit5.MockKExtension\n+import io.mockk.verify\n+import org.junit.jupiter.api.BeforeEach\n+import org.junit.jupiter.api.Test\n+import org.junit.jupiter.api.extension.ExtendWith\n+\n+@ExtendWith(MockKExtension::class)\n+class AttributeExtractionWorkflowClientTest {\n+\n+    @MockK\n+    private lateinit var cadenceClient: CadenceWorkflowClient\n+\n+    @MockK\n+    private lateinit var workflowClient: WorkflowClient\n+\n+    @MockK\n+    private lateinit var attributeExtractionWorkflow: AttributeExtractionWorkflow\n+\n+    private lateinit var attributeExtractionWorkflowClient: AttributeExtractionWorkflowClient\n+\n+    @BeforeEach\n+    fun setUp() {\n+        attributeExtractionWorkflowClient = AttributeExtractionWorkflowClient(cadenceClient)\n+        coEvery { cadenceClient.workflowClient } returns workflowClient\n+        coEvery {\n+            workflowClient.newWorkflowStub(\n+                AttributeExtractionWorkflow::class.java,\n+                any<WorkflowOptions>(),\n+            )\n+        } returns attributeExtractionWorkflow\n+    }\n+\n+    @Test\n+    fun `trigger AttributeExtractionWorkflow happy path`() {\n+        // Prepare\n+        val workflowUuid = \"workflow_uuid_1\"\n+        val metadata = MLRequestMetaData.getDefaultInstance()\n+        val skuWithMetadata = SkuWithMetadata.getDefaultInstance()\n+\n+        coEvery { attributeExtractionWorkflow.execute(any()) } returns Unit\n+\n+        // Act\n+        attributeExtractionWorkflowClient.triggerAttributeExtractionWorkflow(\n+            workflowUuid,\n+            metadata,\n+            skuWithMetadata,\n+        )\n+\n+        // Verify\n+        coVerify(exactly = 1) {\n+            workflowClient.newWorkflowStub(\n+                AttributeExtractionWorkflow::class.java,\n+                any<WorkflowOptions>(),\n+            )\n+        }\n+        verify(exactly = 1) {\n+            attributeExtractionWorkflow.execute(\n+                AttributeExtractionWorkflowParams(\n+                    workflowUuid,\n+                    metadata,\n+                    skuWithMetadata,\n+                ),\n+            )\n+        }\n+    }\n+\n+    @Test\n+    fun `trigger AttributeExtractionWorkflow with default instances`() {\n+        // Prepare\n+        val workflowUuid = \"workflow_uuid_2\"\n+        val metadata = MLRequestMetaData.getDefaultInstance()\n+        val skuWithMetadata = SkuWithMetadata.getDefaultInstance()\n+\n+        coEvery { attributeExtractionWorkflow.execute(any()) } returns Unit\n+\n+        // Act & Assert - should not throw exception\n+        attributeExtractionWorkflowClient.triggerAttributeExtractionWorkflow(\n+            workflowUuid,\n+            metadata,\n+            skuWithMetadata,\n+        )\n+\n+        // Verify workflow was triggered\n+        coVerify(exactly = 1) {\n+            workflowClient.newWorkflowStub(\n+                AttributeExtractionWorkflow::class.java,\n+                any<WorkflowOptions>(),\n+            )\n+        }\n+    }\n+}\ndiff --git a/services/nv-catalog-ml-infra/src/test/kotlin/com/doordash/nvcatalogmlinfra/grpc/MLInfraIServingServiceImplTest.kt b/services/nv-catalog-ml-infra/src/test/kotlin/com/doordash/nvcatalogmlinfra/grpc/MLInfraIServingServiceImplTest.kt\nindex 2e3c230e725..5da0e44e825 100644\n--- a/services/nv-catalog-ml-infra/src/test/kotlin/com/doordash/nvcatalogmlinfra/grpc/MLInfraIServingServiceImplTest.kt\n+++ b/services/nv-catalog-ml-infra/src/test/kotlin/com/doordash/nvcatalogmlinfra/grpc/MLInfraIServingServiceImplTest.kt\n@@ -1,6 +1,7 @@\n package com.doordash.nvcatalogmlinfra.grpc\n \n import com.doordash.asgard.kafka.producer.AsgardKafkaProducer\n+import com.doordash.nvcatalogmlinfra.client.cadence.AttributeExtractionWorkflowClient\n import com.doordash.nvcatalogmlinfra.client.cadence.InferenceWorkflowClient\n import com.doordash.nvcatalogmlinfra.functions.candidateretrieval.RetrieverType\n import com.doordash.nvcatalogmlinfra.model.ArgilModelType\n@@ -10,6 +11,7 @@ import com.doordash.nvcatalogmlinfra.service.v2.CandidateRetrievalService\n import com.doordash.nvcatalogmlinfra.utils.runtime.DynamicValues\n import com.doordash.rpc.common.Code\n import com.google.protobuf.FloatValue\n+import com.google.protobuf.StringValue\n import data.proto.MLInfraIServingServiceData.aGetPrimeMatchRequest\n import data.proto.MLInfraIServingServiceData.aIntraMerchantEntityResolutionRequest\n import data.proto.MLInfraIServingServiceData.aProduct\n@@ -42,6 +44,9 @@ class MLInfraIServingServiceImplTest {\n     @MockK\n     lateinit var inferenceWorkflowClient: InferenceWorkflowClient\n \n+    @MockK\n+    lateinit var attributeExtractionWorkflowClient: AttributeExtractionWorkflowClient\n+\n     @MockK\n     lateinit var dynamicValues: DynamicValues\n \n@@ -219,4 +224,44 @@ class MLInfraIServingServiceImplTest {\n             mlInfraIServingService.retrieveCandidates(Serving.RetrieveCandidatesRequest.getDefaultInstance())\n         }\n     }\n+\n+    @Test\n+    fun `extractProductInformation cadence flow happy path, no exception`(): Unit = runBlocking {\n+        val request = Serving.ExtractProductInformationRequest.newBuilder()\n+            .setMetadata(\n+                Serving.MLRequestMetaData.newBuilder()\n+                    .setRequestId(StringValue.of(\"test-request-id\"))\n+                    .setCallbackToken(StringValue.of(\"test-token\"))\n+                    .setCaller(StringValue.of(\"test-caller\"))\n+                    .build(),\n+            )\n+            .build()\n+\n+        justRun { attributeExtractionWorkflowClient.triggerAttributeExtractionWorkflow(any(), any(), any()) }\n+\n+        val response = mlInfraIServingService.extractProductInformation(request)\n+        Assertions.assertEquals(Code.OK, response.code)\n+        Assertions.assertTrue(response.requestId.value.isNotEmpty())\n+    }\n+\n+    @Test\n+    fun `extractProductInformation unhappy path, with exception`(): Unit = runBlocking {\n+        val request = Serving.ExtractProductInformationRequest.newBuilder()\n+            .setMetadata(\n+                Serving.MLRequestMetaData.newBuilder()\n+                    .setRequestId(StringValue.of(\"test-request-id\"))\n+                    .setCallbackToken(StringValue.of(\"test-token\"))\n+                    .setCaller(StringValue.of(\"test-caller\"))\n+                    .build(),\n+            )\n+            .build()\n+\n+        every {\n+            attributeExtractionWorkflowClient.triggerAttributeExtractionWorkflow(any(), any(), any())\n+        } throws RuntimeException(\"Workflow failed\")\n+\n+        assertThrows<RuntimeException> {\n+            mlInfraIServingService.extractProductInformation(request)\n+        }\n+    }\n }\ndiff --git a/services/nv-catalog-ml-infra/src/test/kotlin/data/proto/MLInfraIServingServiceData.kt b/services/nv-catalog-ml-infra/src/test/kotlin/data/proto/MLInfraIServingServiceData.kt\nindex 03b9cf4ea60..576872a8135 100644\n--- a/services/nv-catalog-ml-infra/src/test/kotlin/data/proto/MLInfraIServingServiceData.kt\n+++ b/services/nv-catalog-ml-infra/src/test/kotlin/data/proto/MLInfraIServingServiceData.kt\n@@ -73,11 +73,13 @@ object MLInfraIServingServiceData {\n         skuIdentifier: SkuIdentifier = aSkuIdentifier(),\n         skuProduct: BaselineSKUAttributes = aSkuProduct(),\n         productTemplateAssignment: ProductTemplateAssignment = aProductTemplateAssignment(),\n+        photos: List<Common.ProcessedPhoto> = emptyList(),\n     ) = extractAttributeRequest {\n         this.metadata = metadata\n         this.skuWithMetadata = skuWithMetadata {\n             identifier = skuIdentifier\n             product = skuProduct\n+            this.photos.addAll(photos)\n         }\n         this.templateAssignment = productTemplateAssignment\n     }\ndiff --git a/services/nv-catalog-ml-infra/src/test/resources/testdata/argil/request/attribute_extraction_argil_request.json b/services/nv-catalog-ml-infra/src/test/resources/testdata/argil/request/attribute_extraction_argil_request.json\nindex 84a345eba8f..548ae6f5d73 100644\n--- a/services/nv-catalog-ml-infra/src/test/resources/testdata/argil/request/attribute_extraction_argil_request.json\n+++ b/services/nv-catalog-ml-infra/src/test/resources/testdata/argil/request/attribute_extraction_argil_request.json\n@@ -2,7 +2,7 @@\n   \"request_id\": \"123_msid\",\n   \"parameters\": {\n     \"input\": {\n-      \"string_param\": \"{\\\"metadata\\\":{\\\"callback_token\\\":\\\"test_token\\\",\\\"request_id\\\":\\\"1\\\",\\\"caller\\\":\\\"caller-service-name\\\"},\\\"sku_with_metadata\\\":{\\\"identifier\\\":{\\\"id\\\":\\\"esku_id\\\",\\\"baseline_sku_hash\\\":\\\"bsku_id\\\",\\\"baseline_sku_version\\\":\\\"bsku_version\\\",\\\"business_id\\\":\\\"123\\\",\\\"merchant_supplied_id\\\":\\\"msid\\\"},\\\"product\\\":{\\\"product\\\":{\\\"raw_merchant_item_name\\\":\\\"COLORADO PREMIUM CORNED BEEF ROUND FLAT\\\",\\\"l1_category\\\":\\\"Meat \\\\u0026 Seafood\\\",\\\"l2_category\\\":\\\"SMOKED/CURED BEEF\\\",\\\"upc\\\":\\\"25210400000\\\",\\\"secondary_upc\\\":[],\\\"brand_name\\\":\\\"COLORADO\\\",\\\"size\\\":\\\"1\\\",\\\"is_alcohol\\\":false,\\\"is_weighted_item\\\":true,\\\"unit_of_measurement\\\":\\\"LB\\\",\\\"additional_image_urls\\\":[],\\\"variant\\\":[],\\\"nutritional_info\\\":[],\\\"ingredients\\\":[],\\\"dietary_flags\\\":[],\\\"snap_eligible\\\":true,\\\"product_attributes\\\":{}},\\\"other_attributes\\\":[],\\\"unknown_attributes\\\":{}}},\\\"template_assignment\\\":{\\\"product_template_id\\\":\\\"c881a806-c6de-4bff-91ee-44d412aa28d8\\\",\\\"product_template_version\\\":\\\"1717174880784\\\",\\\"product_template_name\\\":\\\"Beef Template\\\",\\\"metadata\\\":[{\\\"metadata_field\\\":\\\"product_category_id\\\",\\\"metadata_value\\\":\\\"123\\\"}],\\\"confidence\\\":{\\\"score\\\":0.9999,\\\"confidence_level\\\":2}}}\"\n+      \"string_param\": \"{\\\"metadata\\\":{\\\"callback_token\\\":\\\"test_token\\\",\\\"request_id\\\":\\\"1\\\",\\\"caller\\\":\\\"caller-service-name\\\"},\\\"sku_with_metadata\\\":{\\\"identifier\\\":{\\\"id\\\":\\\"esku_id\\\",\\\"baseline_sku_hash\\\":\\\"bsku_id\\\",\\\"baseline_sku_version\\\":\\\"bsku_version\\\",\\\"business_id\\\":\\\"123\\\",\\\"merchant_supplied_id\\\":\\\"msid\\\"},\\\"product\\\":{\\\"product\\\":{\\\"raw_merchant_item_name\\\":\\\"COLORADO PREMIUM CORNED BEEF ROUND FLAT\\\",\\\"l1_category\\\":\\\"Meat \\\\u0026 Seafood\\\",\\\"l2_category\\\":\\\"SMOKED/CURED BEEF\\\",\\\"upc\\\":\\\"25210400000\\\",\\\"secondary_upc\\\":[],\\\"brand_name\\\":\\\"COLORADO\\\",\\\"size\\\":\\\"1\\\",\\\"is_alcohol\\\":false,\\\"is_weighted_item\\\":true,\\\"unit_of_measurement\\\":\\\"LB\\\",\\\"additional_image_urls\\\":[],\\\"variant\\\":[],\\\"nutritional_info\\\":[],\\\"ingredients\\\":[],\\\"dietary_flags\\\":[],\\\"snap_eligible\\\":true,\\\"product_attributes\\\":{}},\\\"other_attributes\\\":[],\\\"unknown_attributes\\\":{}},\\\"photos\\\":[]},\\\"template_assignment\\\":{\\\"product_template_id\\\":\\\"c881a806-c6de-4bff-91ee-44d412aa28d8\\\",\\\"product_template_version\\\":\\\"1717174880784\\\",\\\"product_template_name\\\":\\\"Beef Template\\\",\\\"metadata\\\":[{\\\"metadata_field\\\":\\\"product_category_id\\\",\\\"metadata_value\\\":\\\"123\\\"}],\\\"confidence\\\":{\\\"score\\\":0.9999,\\\"confidence_level\\\":2}}}\"\n     }\n   },\n   \"inputs\": [],\ndiff --git a/services/nv-catalog-ml-infra/src/test/resources/testdata/argil/request/product_template_assignment_request.json b/services/nv-catalog-ml-infra/src/test/resources/testdata/argil/request/product_template_assignment_request.json\nindex c1f5eb0ed2d..955c63251b4 100644\n--- a/services/nv-catalog-ml-infra/src/test/resources/testdata/argil/request/product_template_assignment_request.json\n+++ b/services/nv-catalog-ml-infra/src/test/resources/testdata/argil/request/product_template_assignment_request.json\n@@ -4,7 +4,7 @@\n   \"request_id\": \"123_msid\",\n   \"parameters\": {\n     \"input\": {\n-      \"string_param\": \"{\\\"metadata\\\":{\\\"callback_token\\\":\\\"test_token\\\",\\\"request_id\\\":\\\"1\\\",\\\"caller\\\":\\\"caller-service-name\\\"},\\\"sku\\\":{\\\"identifier\\\":{\\\"id\\\":\\\"esku_id\\\",\\\"baseline_sku_hash\\\":\\\"bsku_id\\\",\\\"baseline_sku_version\\\":\\\"bsku_version\\\",\\\"business_id\\\":\\\"123\\\",\\\"merchant_supplied_id\\\":\\\"msid\\\"},\\\"product\\\":{\\\"product\\\":{\\\"raw_merchant_item_name\\\":\\\"COLORADO PREMIUM CORNED BEEF ROUND FLAT\\\",\\\"l1_category\\\":\\\"Meat \\\\u0026 Seafood\\\",\\\"l2_category\\\":\\\"SMOKED/CURED BEEF\\\",\\\"upc\\\":\\\"25210400000\\\",\\\"secondary_upc\\\":[],\\\"brand_name\\\":\\\"COLORADO\\\",\\\"size\\\":\\\"1\\\",\\\"is_alcohol\\\":false,\\\"is_weighted_item\\\":true,\\\"unit_of_measurement\\\":\\\"LB\\\",\\\"additional_image_urls\\\":[],\\\"variant\\\":[],\\\"nutritional_info\\\":[],\\\"ingredients\\\":[],\\\"dietary_flags\\\":[],\\\"snap_eligible\\\":true,\\\"product_attributes\\\":{}},\\\"other_attributes\\\":[],\\\"unknown_attributes\\\":{}}}}\"\n+      \"string_param\": \"{\\\"metadata\\\":{\\\"callback_token\\\":\\\"test_token\\\",\\\"request_id\\\":\\\"1\\\",\\\"caller\\\":\\\"caller-service-name\\\"},\\\"sku\\\":{\\\"identifier\\\":{\\\"id\\\":\\\"esku_id\\\",\\\"baseline_sku_hash\\\":\\\"bsku_id\\\",\\\"baseline_sku_version\\\":\\\"bsku_version\\\",\\\"business_id\\\":\\\"123\\\",\\\"merchant_supplied_id\\\":\\\"msid\\\"},\\\"product\\\":{\\\"product\\\":{\\\"raw_merchant_item_name\\\":\\\"COLORADO PREMIUM CORNED BEEF ROUND FLAT\\\",\\\"l1_category\\\":\\\"Meat \\\\u0026 Seafood\\\",\\\"l2_category\\\":\\\"SMOKE\n\n... [4 lines truncated] ...","stderr":"","interrupted":false,"isImage":false}}
{"parentUuid":"127999b2-bb56-4412-900a-0f04a15379bc","isSidechain":false,"userType":"external","cwd":"/Users/jim.he/Projects/asgard","sessionId":"d16e2963-d9c9-45d8-a8f2-84024947adad","version":"1.0.69","gitBranch":"vlathgupta/shadow/cadence-skeleton","message":{"id":"msg_01YJd38cpbP5CvQHA2zutcHL","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"This commit creates a skeleton for attribute extraction functionality in the nv-catalog-ml-infra service. Here's my review:\n\n## ✅ **Positive aspects:**\n\n1. **Well-structured Cadence workflow implementation** following existing patterns\n2. **Comprehensive test coverage** for both workflow client and gRPC service  \n3. **Proper dependency injection** setup with Guice modules\n4. **Good error handling** in the workflow client with specific exception types\n5. **Consistent logging** using AsgardLogger throughout\n6. **Proto library version updates** (0.5.2→0.5.3 and 0.11.+→0.14.2)\n\n## 🔍 **Areas for improvement:**\n\n1. **Test verification issue** in `AttributeExtractionWorkflowClientTest:103`:\n   ```kotlin\n   verify(exactly = 1) {\n       attributeExtractionWorkflow.execute(...)\n   }\n   ```\n   This verifies the mock method call instead of the actual workflow trigger. Should verify `WorkflowClient.start()` was called.\n\n2. **Missing constructor injection** in `AttributeExtractionWorkflowCadenceModule:14`:\n   ```kotlin\n   fun getAttributeExtractionWorkflow(): AsgardCadenceWorkflow = AttributeExtractionAsgardCadenceWorkflow()\n   ```\n   Should inject dependencies: `AttributeExtractionAsgardCadenceWorkflow()`\n\n3. **Empty activity list** in `AttributeExtractionAsgardCadenceWorkflow:9-11` - consider adding a TODO comment explaining when activities will be added\n\n4. **Test data maintenance** - the JSON test files now include empty `photos:[]` arrays, ensure this is intentional\n\n## 📝 **Minor suggestions:**\n\n- Consider adding validation for `workflowId` parameter in the client\n- The workflow implementation is currently just logging - add TODO comments for planned functionality\n\n## Overall Assessment: ✅ **Approved**\n\nThis is a solid skeleton implementation that follows established patterns in the codebase. The structure is sound and ready for the actual attribute extraction logic to be implemented."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":10659,"cache_read_input_tokens":16965,"output_tokens":500,"service_tier":"standard"}},"requestId":"req_011CRw1e12WczDCEPiQxeQdA","type":"assistant","uuid":"0b835cfa-a037-4ae7-b2e4-689310e26b3d","timestamp":"2025-08-08T22:13:40.712Z"}
{"parentUuid":"0b835cfa-a037-4ae7-b2e4-689310e26b3d","isSidechain":false,"userType":"external","cwd":"/Users/jim.he/Projects/asgard","sessionId":"d16e2963-d9c9-45d8-a8f2-84024947adad","version":"1.0.69","gitBranch":"vlathgupta/shadow/cadence-skeleton","type":"user","message":{"role":"user","content":"Any critical issues?"},"uuid":"ce7722d4-a860-4b10-b227-0ef10df61732","timestamp":"2025-08-08T22:14:26.022Z"}
{"parentUuid":"ce7722d4-a860-4b10-b227-0ef10df61732","isSidechain":false,"userType":"external","cwd":"/Users/jim.he/Projects/asgard","sessionId":"d16e2963-d9c9-45d8-a8f2-84024947adad","version":"1.0.69","gitBranch":"vlathgupta/shadow/cadence-skeleton","message":{"id":"msg_011XExvYh8Lp1SBnWHBcPVmc","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"No critical issues. \n\nThe test verification issue I mentioned is incorrect - the test is actually using MockK properly and verifying the workflow stub execution, which is the right approach for testing the client.\n\nThe code is production-ready as a skeleton implementation."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":510,"cache_read_input_tokens":27624,"output_tokens":56,"service_tier":"standard"}},"requestId":"req_011CRw1iWCJpbcquc3Fv6thA","type":"assistant","uuid":"7f3af576-430f-43b0-b132-6f4545aae1f4","timestamp":"2025-08-08T22:14:29.993Z"}
